process {
    executor = 'slurm'
    containerOptions = '--user $(id -u):$(id -g)'
    errorStrategy = 'retry'
    maxRetries = 2

    // Lightweight tasks: Fits into the standard partition
    withLabel: process_single {
        queue = 'standard'
        cpus = { 1 }
        memory = { 6.GB * task.attempt }
        time = { 4.h * task.attempt }
        resourceLimits = [
            cpus: 4,
            memory: 30.GB,
        ]
    }

    // Low resource tasks: Use nf-standard-mem
    withLabel: process_low {
        queue = 'nf-standard-mem'
        cpus = { 2 * task.attempt }
        memory = { 12.GB * task.attempt }
        time = { 4.h * task.attempt }
        resourceLimits = [
            cpus: 8,
            memory: 60.GB,
        ]
    }

    // Medium resource tasks: Use nf-standard-mem or nf-high-mem
    withLabel: process_medium {
        queue = 'nf-high-mem'
        cpus = { 6 * task.attempt }
        memory = { 36.GB * task.attempt }
        time = { 8.h * task.attempt }
        resourceLimits = [
            cpus: 16,
            memory: 120.GB,
        ]
    }

    // High resource tasks: Use nf-high-mem
    withLabel: process_high {
        queue = 'nf-high-mem'
        cpus = { 12 * task.attempt }
        memory = { 72.GB * task.attempt }
        time = { 16.h * task.attempt }
        resourceLimits = [
            cpus: 16,
            memory: 120.GB,
        ]
    }

    // Long-running tasks: Use high partition for extended time
    withLabel: process_long {
        queue = 'high'
        time = { 20.h * task.attempt }
        resourceLimits = [
            cpus: 32,
            memory: 250.GB,
        ]
    }

    // Memory-intensive tasks: Use high partition for maximum memory
    withLabel: process_high_memory {
        queue = 'high'
        memory = { 200.GB * task.attempt }
        resourceLimits = [
            cpus: 32,
            memory: 250.GB,
        ]
    }

    withName: patchSegmentationProseg {
        queue = 'high'
        cpus = { 8 * task.attempt }
        memory = { 200.GB * task.attempt }
        time = { 10.d * task.attempt }
        resourceLimits = [
            cpus: 32,
            memory: 400.GB,
        ]
    }
}

aws {
    client {
        anonymous = true
    }
}
